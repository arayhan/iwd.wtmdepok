{"version":3,"sources":["containers/Home/Home.jsx","utils/Router.jsx","components/molecules/NavBarMain.jsx","utils/Theme.jsx","app/App.js","serviceWorker.js","index.js"],"names":["Home","Component","Router","path","exact","component","useStyles","makeStyles","theme","toolbar","alignItems","justifyContent","title","color","text","primary","fontSize","size","navbar","textDecoration","button","NavBarMain","classes","className","root","AppBar","position","Toolbar","to","Typography","Button","variant","createMuiTheme","grey","App","ThemeProvider","CssBaseline","Container","Box","mt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAQeA,EANf,iLAEE,OAAO,kBAAC,WAAD,iBAFT,GAA0BC,aCYXC,EARA,WACd,OACC,kBAAC,WAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWL,M,gDCC9BM,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACtCC,QAAS,CACRC,WAAY,SACZC,eAAgB,iBAEjBC,MAAO,CACNC,MAAOL,EAAMM,KAAKD,MAAME,QACxBC,SAAUR,EAAMM,KAAKG,KAAKC,OAC1BC,eAAgB,QAEjBC,OAAQ,CACPD,eAAgB,YAkCHE,EA9BI,WAClB,IAAMC,EAAUhB,IAEhB,OACC,yBAAKiB,UAAWD,EAAQE,MACvB,kBAACC,EAAA,EAAD,CAAQC,SAAS,QAAQb,MAAM,SAC9B,kBAACc,EAAA,EAAD,CAASJ,UAAWD,EAAQb,SAC3B,kBAAC,IAAD,CAAMmB,GAAG,IAAIL,UAAWD,EAAQV,OAC/B,kBAACiB,EAAA,EAAD,CAAYN,UAAWD,EAAQV,OAA/B,cAED,6BACC,kBAAC,IAAD,CAAMgB,GAAG,KACR,kBAACE,EAAA,EAAD,CAAQC,QAAQ,aAAhB,SAED,kBAAC,IAAD,CAAMH,GAAG,WACR,kBAACE,EAAA,EAAD,CAAQC,QAAQ,aAAhB,WAED,kBAAC,IAAD,CAAMH,GAAG,aACR,kBAACE,EAAA,EAAD,CAAQC,QAAQ,aAAhB,aAED,kBAAC,IAAD,CAAMH,GAAG,SACR,kBAACE,EAAA,EAAD,CAAQC,QAAQ,aAAhB,c,gBC3CMvB,EAAQwB,YAAe,CACnClB,KAAM,CACLD,MAAO,CACNE,QAASkB,IAAK,MAEfhB,KAAM,CACLC,OAAQ,OCiBIgB,EAhBf,iLAEE,OACC,kBAACC,EAAA,EAAD,CAAe3B,MAAOA,GACrB,kBAAC4B,EAAA,EAAD,MACA,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACR,kBAAC,EAAD,aARN,GAAyBtC,aCELuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAD,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a7028f3a.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\n\r\nexport class Home extends Component {\r\n\trender() {\r\n\t\treturn <Fragment>HOME</Fragment>;\r\n\t}\r\n}\r\n\r\nexport default Home;\r\n","import React, { Fragment } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\n// Pages\r\nimport Home from \"../containers/Home/Home\";\r\n\r\nconst Router = () => {\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<Route path=\"/\" exact component={Home} />\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default Router;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\ttoolbar: {\r\n\t\talignItems: \"center\",\r\n\t\tjustifyContent: \"space-between\"\r\n\t},\r\n\ttitle: {\r\n\t\tcolor: theme.text.color.primary,\r\n\t\tfontSize: theme.text.size.navbar,\r\n\t\ttextDecoration: \"none\"\r\n\t},\r\n\tbutton: {\r\n\t\ttextDecoration: \"none\"\r\n\t}\r\n}));\r\n\r\nconst NavBarMain = () => {\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<AppBar position=\"fixed\" color=\"white\">\r\n\t\t\t\t<Toolbar className={classes.toolbar}>\r\n\t\t\t\t\t<Link to=\"/\" className={classes.title}>\r\n\t\t\t\t\t\t<Typography className={classes.title}>IWD Depok</Typography>\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Link to=\"/\">\r\n\t\t\t\t\t\t\t<Button variant=\"contained\">Home</Button>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t<Link to=\"/agenda\">\r\n\t\t\t\t\t\t\t<Button variant=\"contained\">Agenda</Button>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t<Link to=\"/speakers\">\r\n\t\t\t\t\t\t\t<Button variant=\"contained\">Speakers</Button>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t<Link to=\"/team\">\r\n\t\t\t\t\t\t\t<Button variant=\"contained\">Team</Button>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Toolbar>\r\n\t\t\t</AppBar>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default NavBarMain;\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\n\r\nexport const theme = createMuiTheme({\r\n\ttext: {\r\n\t\tcolor: {\r\n\t\t\tprimary: grey[800]\r\n\t\t},\r\n\t\tsize: {\r\n\t\t\tnavbar: 20\r\n\t\t}\r\n\t}\r\n});\r\n","// Libraries\nimport React, { Component, Fragment } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\nimport Router from \"../utils/Router\";\nimport NavBarMain from \"../components/molecules/NavBarMain\";\nimport { theme } from \"../utils/Theme\";\n\nexport class App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<ThemeProvider theme={theme}>\n\t\t\t\t<CssBaseline />\n\t\t\t\t<NavBarMain />\n\t\t\t\t<Container>\n\t\t\t\t\t<Box mt={10}>\n\t\t\t\t\t\t<Router />\n\t\t\t\t\t</Box>\n\t\t\t\t</Container>\n\t\t\t</ThemeProvider>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app/App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<BrowserRouter>\n\t\t<App />\n\t</BrowserRouter>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}